{----------------------------------------------------------------------------}
{                              EZDATES.UNIT                                  }
{                                                                            }
{ This unit contains a number of routines for converting the various Apple   }
{ date formats from one to another.                                          }
{                                                                            }
{ Copyright 1989...End Of Time                                               }
{ EZ-Soft                                                                    }
{                                                                            }
{ Written by: P.C. Easdown                                                   }
{----------------------------------------------------------------------------}

{$ Keep 'EZDates' }
Unit EZDates;

interface

uses Common, MscToolSet, IntegerMath;

{$ libprefix 'int/' }
USES EZConst, EZMisc;

TYPE
    DateRecord      = Record
                        Day             : Integer;
                        Month           : Integer;
                        Year            : Integer;
                        Date            : pString;
                      end;
 
    TimeRecord      = Record
                        Minutes         : Integer;
                        Hours           : Integer;
                        Time            : pString;
                      end;

{----------------------------------------------------------------------------}
{ ConvInt2Date  Takes a date stamp of prodos 8 vintage, and breaks it up     }
{ ~~~~~~~~~~~~  into its components, in a DateRecord structure.              }
{----------------------------------------------------------------------------}

Procedure ConvInt2Date(    IntDate : LongInt;
                       var OutDate : DateRecord);

{----------------------------------------------------------------------------}
{ Date2Int  The opposite of ConvInt2Date, this routine takes the date as     }
{ ~~~~~~~~  specified by inDate, and converts it to a prodos 8 vintage date  }
{ record.                                                                    }
{----------------------------------------------------------------------------}

Function Date2Int(InDate : DateRecord) : LongInt;

{----------------------------------------------------------------------------}
{ ConvInt2Time  Takes a time stamp of prodos 8 vintage, and breaks it up     }
{ ~~~~~~~~~~~~  into its components, in a TimeRecord structure.              }
{----------------------------------------------------------------------------}

Procedure ConvInt2Time(    IntTime : LongInt;
                       var OutTime : TimeRecord);

{----------------------------------------------------------------------------}
{ Time2Int  The opposite of ConvInt2Time, this routine takes the time as     }
{ ~~~~~~~~  specified by inTime, and converts it to a prodos 8 vintage time  }
{ record.                                                                    }
{----------------------------------------------------------------------------}

Function Time2Int(InTime : TimeRecord) : LongInt;

{----------------------------------------------------------------------------}
{ ConvFileDate2Int  This takes the date and time stamps that would come from }
{ ~~~~~~~~~~~~~~~~  either the system, or a getfileinfo call, and converts   }
{ them from their confused state into nice prodos 8 format, thus making      }
{ comparison between dates and times very easy.                              }
{----------------------------------------------------------------------------}

Procedure ConvFileDate2Int(    DateWord    : longInt;
                               TimeWord    : longInt;
                           var Date        : longInt;
                           var Time        : longInt);

{----------------------------------------------------------------------------}
{ ConvFileDate2Date This takes the date and time stamps that would come from }
{ ~~~~~~~~~~~~~~~~~ either the system, or a getfileinfo call, and converts   }
{ them from their confused state into the structured format for further      }
{ manipulation by the application.                                           }
{----------------------------------------------------------------------------}

Procedure ConvFileDate2Date(    DateWord   : longInt;
                                TimeWord   : longInt;
                            var Date       : DateRecord;
                            var Time       : TimeRecord);

{----------------------------------------------------------------------------}
{ GetSysDate  This procedure gets the current RTC time and date stamp from   }
{ ~~~~~~~~~~  the system, and converts them to prodos 8 format.              }
{                                                                            }
{ It should be noted that this routine does allow for the different date     }
{ formats available on the GS.                                               }
{----------------------------------------------------------------------------}

Procedure GetSysDate(var MyTime : LongInt;
                     var MyDate : LongInt);

implementation

Procedure ConvInt2Date;
Type
    TwoChar = String[2];
var
    DayChar     : TwoChar;
    MonthChar   : TwoChar;
    YearChar    : TwoChar;
begin
   with OutDate do
    begin
        { Carry out the extraction.                                           }
        Day := ord(ord4(IntDate) & ord4($001f));
        Month := ord((ord4(IntDate) & ord4($01e0)) >> 5);
        Year := ord((ord4(IntDate) & ord4($fe00)) >> 9);
 
        { Produce the visual representation in a DD/MM/19YY format.           }
        DayChar := cnvis(Day);
        if length(DayChar) = 1 then
            DayChar := concat('0',DayChar);
        MonthChar := cnvis(Month);
        if length(MonthChar) = 1 then
           MonthChar := concat('0',MonthChar);
        YearChar := cnvis(Year);
        if length(YearChar) = 1 then
            YearChar := concat('0',YearChar);
        Date := concat(DayChar,   '/',
                       MonthChar, '/19',
                       YearChar);
    end;
end;

Function Date2Int;
begin
    With InDate do
        Date2Int := (ord4(Year  << 9) |
                     ord4(Month << 5) |
                     ord4(Day)) & ord4($0000ffff);
end;

Procedure ConvInt2Time;
Type
    TwoChar = String[2];
var
    MinuteChar  : TwoChar;
    HourChar    : TwoChar;
begin
    with OutTime do
    begin
        { Carry out the extraction.                                           }
        Minutes := ord(ord4(IntTime) & ord4($003f));
        Hours := ord((ord4(IntTime) & ord4($1f00)) >> 8);
 
        { Convert to a visual representation in a HH:MM format.               }
        MinuteChar := cnvis(Minutes);
        if length(MinuteChar) = 1 then
            MinuteChar := concat('0',MinuteChar);
        HourChar := cnvis(Hours);
        if length(HourChar) = 1 then
            HourChar := concat('0',HourChar);
        Time := concat(HourChar, ':', MinuteChar);
    end;
end;

Function Time2Int;
begin
    With InTime do
        Time2Int := (ord4(Hours << 8) | ord4(Minutes)) & ord4($0000ffff);
end;

Procedure ConvFileDate2Int;
var
    DateRec : DateRecord;
    TimeRec : TimeRecord;

begin
    { As may be noticed, Apple realy got confused when they defined their     }
    { date and time words.  What, with the month and day coming from the time }
    { word, and the entire time coming from the date word!!                   }
 
     With DateRec do
     begin
         Year := ConvL2I(DateWord).msw >> 8;
         Month := (ConvL2I(TimeWord).lsw >> 8) + 1;
         Day := (ConvL2I(TimeWord).lsw & $00ff) + 1;
     end;
     Date := Date2Int(DateRec);
 
     With TimeRec do
     begin
         Hours := ConvL2I(DateWord).msw & $00ff;
         Minutes := ConvL2I(DateWord).lsw >> 8;
     end;
     Time := Time2Int(TimeRec);
end;

Procedure ConvFileDate2Date;
var
    DateInt : longInt;
    TimeInt : longInt;
begin
    ConvFileDate2Int(DateWord,TimeWord,DateInt,TimeInt);
    ConvInt2Date(DateInt,Date);
    ConvInt2Time(TimeInt,Time);
end;

Procedure GetSysDate;
const
    dateFormat  = $0034;
var
    DateLayout  : Integer;
    BatText     : pString;
    SysTime     : TimeRecord;
    SysDate     : DateRecord;
    Tmp, Tmp1   : pString;
    Tmp2, Tmp3  : pString;
begin
    DateLayout := ReadBParam(dateFormat);   { Get the date layout             }
 
    ReadAsciiTime(@BatText[1]);             { Get the date and time stamp.    }
    BatText[0] := chr(20);
 
    With SysTime do                         { Extract the time.  This is easy }
    begin                                   { as the time always takes the    }
        Tmp := copy(BatText, 10, 2);        { same format.                    }
        Hours := Dec2Int(@Tmp[1],2,0);
        Tmp := copy(BatText, 13, 2);
        Minutes := Dec2Int(@Tmp[1],2,0);
        Tmp := copy(BatText, 19, 1);
        If Tmp = 'P' then                   { Force the time into 24 hour as  }
            Hours := Hours + 12;            { it's easier to handle.          }
    end;
 
    With SysDate do
    begin
        Tmp1 := copy(BatText, 1, 2);        { Get the three date components.  }
        Tmp2 := copy(BatText, 4, 2);
        Tmp3 := copy(BatText, 7, 2);
 
        Case DateLayout of
            0   :   begin                               { MM/DD/YY format     }
                        Day := Dec2Int(@Tmp2[1],2,0);
                        Month := Dec2Int(@Tmp1[1],2,0);
                        Year := Dec2Int(@Tmp3[1],2,0);
                    end;
            1   :   begin                               { DD/MM/YY format     }
                        Day := Dec2Int(@Tmp1[1],2,0);
                        Month := Dec2Int(@Tmp2[1],2,0);
                        Year := Dec2Int(@Tmp3[1],2,0);
                    end;
            2   :   begin                               { YY/MM/DD format     }
                        Day := Dec2Int(@Tmp3[1],2,0);
                        Month := Dec2Int(@Tmp2[1],2,0);
                        Year := Dec2Int(@Tmp1[1],2,0);
                    end;
        end;
    end;
 
    MyTime := Time2Int(SysTime);        { Convert to prodos 8 format.         }
    MyDate := Date2Int(SysDate);
end;

end.
